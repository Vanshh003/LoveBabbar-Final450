https://practice.geeksforgeeks.org/problems/k-th-largest-sum-contiguous-subarray/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article




//TC: O(n^2 logn)
//SC: O(n^2)
class Solution{
public:
    int kthLargest(vector<int> &arr,int N,int k) {
        vector<int> ans;
        int sum = 0;
        
        for(int i=0; i<N; i++) {
           
            sum = 0;
            for(int j=i; j<N; j++) {
                sum += arr[j];
                ans.push_back(sum);
            }
        }
        
        sort(ans.begin(), ans.end(), greater<int>());
        return ans[k-1];
    }
};




//TC: O(n^2 logn)
//SC: O(n^2)
class Solution{
public:
    int kthLargest(vector<int> &arr,int N,int k) {
        vector<int> ans;
        int n = arr.size();
        
        for(int i=0; i<n; i++) {
            int sum = 0;
            
            for(int j=i; j<n; j++) {
                sum += arr[j];
                ans.push_back(sum);
            }
        }
        
        sort(ans.begin(), ans.end());
        
        return ans[ans.size() - k];
    }
};




//SC: O(k)
class Solution{
public:
    int kthLargest(vector<int> &arr,int N,int k) {
        priority_queue<int, vector<int>, greater<int>> minheap;
        
        int n = arr.size();
        for(int i=0; i<n; i++) {
            int sum = 0;
            
            for(int j=i; j<n; j++) {
                sum += arr[j];
                
                if(minheap.size() < k) minheap.push(sum);
                else {
                    if(sum > minheap.top()) {
                        minheap.pop();
                        minheap.push(sum);
                    }
                }
            }
        }
        
        return minheap.top();
    }
};




class Solution{
public:
    int kthLargest(vector<int> &arr,int N,int k) {
        priority_queue<int> maxheap;
        
        for(int i=0; i<N; i++) {
            int sum = 0;
            
            for(int j=i; j<N; j++) {
                sum += arr[j];
                maxheap.push(sum * -1);
                
                if(maxheap.size() > k) maxheap.pop();
            }
        }
        
        int ans = -1 * maxheap.top();
        return ans;
    }
};
